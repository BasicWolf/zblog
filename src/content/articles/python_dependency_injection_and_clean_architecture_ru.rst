Domain-driven design, Clean architecture, Dependency injection и Python
=======================================================================

:slug: python_dependency_injection_clean_architecture_ru
:categories: Articles
:tags: programming, python, dependency injection, clean architecture, inversion of control, ioc, di
:date: 2020-09-27 12:00
:status: draft

 - Глянь ка, статью подготовил.
\- Чувак, с таким заголовком да на английскую версию Хабра.
\- Предметно-ориентированное проектирование, Чистая архитектура, Внедрение зависимостей и Пайтон?
С пронзительным хлопком в воздухе материализуется обалдевший Сатана в обличии сине-жёлтого питона...

---

Полтора года назад я расстался с миром Python/Django и попал в мир
Kotlin/Spring Boot и Чистой Архитектуры.
Недавно нам понадобилось написать небольшую программу для внутренних
целей. Недолго заморачиваясь, я написал её на всё ещё любимом
Python. К моему удивлению и удовольствию, её удалось
написать примения вышеупомянутые практики
Предметно-ориентированного проектирования (Domain-driven design, DDD),
Чистой Архитектуры (Clean architecture) и
Внедрения зависимостей (Dependency Injection, DI).

Представляю на ваш суд технический рассказ о том, что такое
и как связаны между собой все вышеупомянутые темы.


Пролог
------

Полтора года назад я расстался с миром Python/Django и очутился
в мир Kotlin/Spring Boot.
Нашей команде повезло вдвойне: нас пригласили в технологический
авангард компании Abloy и мы должны были помочь перенести её из механического
века в век цифровой. Желание "делать качественно" поддерживалось на
всех уровнях менеджмента. Mы могли *творить* с чистого листа.

Муки выбора стека для бэкэнда были короткими:
двое джавистов против одного питониста не оставили места для манёвра.
Spring Boot в качестве фреймворка был выбран по той же причине.
Через мы попробовали Kotlin и к Java больше не возвращались.
Дальше пошло по накатаной: архитектура - ну а что мудрить, MVC.
Сделаем традиционные слои: бизнес-слой, контроллеры, персистентность...

**СТОП!**

Опять за старое?
Давайте потратим время на понимание предметной области.
Распишем истории пользователей (*User Story Mapping*).
Вникнем в практики DDD.
В конце концов почитаем, что умные люди говорят о надёжных архитектурных
решениях.

И вот, полтора года спустя, наше приложение стремительно растёт.
Благодаря качественному фундаменту и архитектуре его легко
поддерживать, тестировать, развивать.
Код получается выразительным и легковесным. Компоненты - легко заменяемы.
Во всех отношениях это приложение качественнее всего, написанного
нами в прошлом.

Недавно нашим железячникам понадобилась утилита для сборки, шифрования и
и выкладывания прошивок на S3.
Я вызвался помочь с написанием, т.к. ребята немного знакомы с Python
(а основным рабочим инструментом у них служит bare-metal C).
Даже в таком маленьком приложении, нам удалось
применить лучшие практики DDD и Чистой архитектуры.
Оглядываясь назад понимаю, что не смог бы написать *так* хорошо
опираясь на старый опыт. Зато я точно знаю, какие крупицы
знаний помогли программировать и решать проблемы бизнеса эффективнее.
Поехали!

Dependency Injection
--------------------



Hexagonal architecture of Ports and Adapters
--------------------------------------------
